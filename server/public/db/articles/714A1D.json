{"fid":"714A1D","title":"掘金","author":"徐小夕","label":["前端","设计","产品"],"ct":1609333628650,"type":1,"visible":1,"content":"![](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4f0597ea63a54801a9325811709622b1~tplv-k3u1fbpfcp-watermark.image)\n## 前言\n笔者最近一直在研究**Lowcode**(低代码)平台, 也做了非常多的实践, 对于页面可视化搭建平台有了基本的研发方向和解决方案, 后期会陆续分享我对低代码平台的一些理解和解决方案, 并在企业应用层做一些探索.\n\n## 正文\n### 1. 什么是低代码以及低代码的意义\n最近笔者在**outsystems**网站上看了一篇比较好的阐述低代码平台的文章, 这里笔者特意做一个简单的定义:\n> **低代码** 是一系列工具，可帮助我们使用拖放界面直观地创建完整的应用程序。低代码平台无需编写数千行复杂的代码和语法，而是使用户能够快速，直观地构建具有现代用户界面，集成，数据和逻辑的完整应用程序。\n\n**低代码** 是一种软件开发方法，可以更快地以最少的手工编码交付应用程序。通过在图形界面中使用可视化建模来组装和配置应用程序，开发人员可以跳过所有基础架构，并重新实现以往很难解决的场景，让开发人员聚焦于自身业务独特性的打造。\n\n打个比方，想象一下你开的一家口罩制造厂：涉及自动化的机器并不能决定口罩的外观，但它们确实会加快口罩的组装和交付过程。这就是低代码的作用。\n\n低代码对软件来说就像装配线对口罩制造厂一样：都使困难且耗时的手动任务自动化，从而使人们腾出更多的时间去做更重要的事情。\n\n我们市面上比较常见的低代码开发平台有:\n1. **可视化IDE**：一种用于可视化定义应用程序的UI，工作流和数据模型，并在必要时添加手写代码的环境。\n2. **与各种后端或服务的连接器**：自动处理数据结构，存储和检索。\n3. **应用程序生命周期管理器**：用于在测试，登台和生产中构建，调试，部署和维护应用程序的自动化工具。\n\n比较先进的系统（例如**OutSystems**）为我们提供了创建现代，跨平台的企业移动和Web应用程序所需的一切，并具有补充现有团队结构的功能。如下图流程所示:\n![](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9047f80a8c04439aa7814096509d0c11~tplv-k3u1fbpfcp-watermark.image)\n\n### 2. 低代码开发流程\n我们传统的软件开发过程往往都会经过如下所示流程:\n![](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f37cb3f7932f45c7a5f18fe9b12122c9~tplv-k3u1fbpfcp-watermark.image)\n也就是从基本的需求设计, 产品规划到前后端应用开发, 最后到测试, 部署上线.\n\n使用低代码, 他的开发流程看起来像:\n![](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f747ddd55c974eb99d8ca896f4eb8cd7~tplv-k3u1fbpfcp-watermark.image)\n每一个步骤都能通过非常简单的拖拽去实现, 大大降低的开发成本, 使得开发人员和产品工作者能更专注的聚焦于核心业务的打磨和快速试错, 更为敏捷开发提供了有力支撑.\n\n### 3. 如何实现低代码体系下的内外部系统交互\n在介绍完低代码平台之后, 我们开始聚焦于实际业务场景, 来实现低代码开发平台中遇到的核心问题以及解决方案. 这里笔者拿**H5-Dooring**来举个例子, 先看看dooring的操作界面:\n![](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/502a219dc84e49ae9fea3fcdd7a5f813~tplv-k3u1fbpfcp-watermark.image)\n我们在使用可视化平台时除了需要满足对展示型页面的设计需求外, 我们更多的是要和企业自身业务打通,比如如何实现跨系统间的交互, 如何实现基本元素的交互能力, 如何植入外部API使得数据流向企业内部等. 这些需求对应的实际场景如下:\n\n1. 网页嵌入App内部需要和app端通信, 而不是单纯的展示\n2. 网页需要对用户的操作实现基本的交互能力, 比如跳转链接, 打开弹窗等\n3. 企业配置好的表单, 对外收集数据时希望流入自己内部系统做数据收集和分析\n\n笔者将针对以上场景, 在H5-dooring中给出相应的解决方案. \n#### 3.1 网页嵌入App内部和app端通信实现\n要实现和外部容器通信,必须具备的就是自定义编码能力, 也就是笔者采用LowCode而不是noCode的原因, 具体实现方式有很多, 比如采用比较流行的代码编辑插件**react-codemirror2**或者 **react-monaco-editor**. 其次要解决的就是哪些组件需要具备这种交互能力, 这里很明显是我们的**Button**组件. 效果如下:\n![](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f95e9e237a2f4a9f9556eead20a824c7~tplv-k3u1fbpfcp-watermark.image)\n![](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8aa87d6d17834fc1a4952f7ee43262d4~tplv-k3u1fbpfcp-watermark.image)\n这样我们就能实现真正的代码自治和跨容器通信了. 至于**react-codemirror2**的使用方式,笔者简单写个demo供大家参考:\n``` html\nimport {Controlled as CodeMirror} from 'react-codemirror2';\nrequire('codemirror/mode/javascript/javascript');\n\n<CodeMirror\n  value={this.state.value}\n  options={options}\n  onBeforeChange={(editor, data, value) => {\n    this.setState({value});\n  }}\n  onChange={(editor, data, value) => {\n  }}\n/>\n```\n当然其内部支持更多的语言扩展, 感兴趣的可以研究一下, 笔者也基于它实现了一个简单的代码编辑器, 可以研究一下.\n\n#### 3.2 页面元素对用户的操作实现基本的交互能力, 比如跳转链接, 打开弹窗等\n基本上任何可视化搭建平台都会提供一定程度上的交互能力, 这些交互往往和交互组件所绑定, 比如按钮, 链接, 这里笔者给搭大家展示在Button(按钮)组件中的应用:\n![](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b41e6849990d4fd2897137f04c859d1d~tplv-k3u1fbpfcp-watermark.image)\n以上为3中常见的交互模式, 即:\n\n1. 跳转链接\n2. 打开弹窗, 并自定义弹窗内容\n3. 自定义交互能力\n\n因为第三种方式笔者已经在上面介绍了, 这里重点介绍弹窗交互. 一般的弹窗交互可能会支持的弹窗内容如下:\n\n1. 图片\n2. 文字提示\n3. 图文提示\n4. 表格\n\n还有很多形式, 如果我们的实现中要一次实现这些组件, 那将是非常大的工作量, 所以笔者这里设计了一种一劳永逸的方式——**富文本编辑器**. 笔者提供富文本编辑器来实现用户定义任何内容形态的能力, 如下图所示:\n![](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b10da3eed753419fbc0636f0d3dea076~tplv-k3u1fbpfcp-watermark.image)\n在手机端的效果如下:\n![](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/04e90c53906d4c318ab610bd55d0343e~tplv-k3u1fbpfcp-watermark.image)\n要实现该交互需要定义交互的json-schema, 这里笔者在之前的文章中也解剖过H5-dooring的具体实现, 这里不一一介绍了, 我们主要来看看富文本编辑器, 这里笔者推荐两款:\n* **react-quill**\n* **braft-editor**\n\n#### 3.3 企业配置好的表单, 对外收集数据时希望流入自己内部系统做数据收集和分析\n对于交互型应用来说, 数据追踪和分析能力是比较重要的一环, 目前也有很多表单问卷工具, 同样H5-Dooring也提供了表单问卷一体化解决方案, 用户可以在平台内搭建自定义的问卷并进行数据收集, 分析. 对于有私域需求的用户来说, 他们希望表单的数据流向自己内部系统, 自己进行分析, 所以我们理论上也应该提供这种开发接口供用户使用, 在表单设计中, 笔者暴露了api接口来实现这一需求:\n![](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ef2cb2bbd68e4adaa2d7e92b3ffe6f96~tplv-k3u1fbpfcp-watermark.image)\n如果用户提供了api接口, 页面会自动提交到api指定的地址, 笔者对该接口做了跨域处理, 用户只需要提供对应的跨域接口即可. 代码实现如下:\n``` js\nif (api) {\n    fetch(api, {\n      body: JSON.stringify(formData),\n      cache: 'no-cache',\n      headers: {\n        'content-type': 'application/json',\n      },\n      method: 'POST',\n      mode: 'cors',\n    });\n  }else {\n    req.post(`xxx/xxx`, formData)\n}\n```\n\n**所以, 今天你又博学了吗?**\n\n## 最后\n以上教程笔者已经集成到[**H5-Dooring**](https://github.com/MrXujiang/h5-Dooring)中，对于一些更复杂的交互功能，通过合理的设计也是可以实现的，大家可以自行探索研究。\n\ngithub地址：[H5编辑器H5-Dooring](https://github.com/MrXujiang/h5-Dooring)\n\n开源投票入口：[为H5-Dooring投票](https://www.oschina.net/p/h5-dooring)\n\n如果想学习更多H5游戏, **webpack**，**node**，**gulp**，**css3**，**javascript**，**nodeJS**，**canvas**数据可视化等前端知识和实战，欢迎在《趣谈前端》一起学习讨论，共同探索前端的边界。\n\n## 更多推荐\n* [基于React+Koa实现一个h5页面编辑器－Dooring](https://juejin.im/post/6864410873709592584)\n* [如何实现H5编辑器的实时预览和真机扫码预览功能](https://juejin.im/post/6876751431374929934)\n* [H5编辑器的图片上传和图片库设计方案](https://juejin.im/post/6880802339835133966)\n* [在线IDE开发入门之从零实现一个在线代码编辑器](https://juejin.im/post/6871424158052384782)\n* [如何设计H5编辑器中的模版库并实现自动生成封面图](https://juejin.im/post/6882391035859697671)\n* [深度剖析github star数15.1k的开源项目redux-thunk](https://juejin.im/post/6861538848963461133)","html":"<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4f0597ea63a54801a9325811709622b1~tplv-k3u1fbpfcp-watermark.image\" alt=\"\"></p>\n<h2 id=\"前言\">前言</h2>\n<p>笔者最近一直在研究<strong>Lowcode</strong>(低代码)平台, 也做了非常多的实践, 对于页面可视化搭建平台有了基本的研发方向和解决方案, 后期会陆续分享我对低代码平台的一些理解和解决方案, 并在企业应用层做一些探索.</p>\n<h2 id=\"正文\">正文</h2>\n<h3 id=\"1-什么是低代码以及低代码的意义\">1. 什么是低代码以及低代码的意义</h3>\n<p>最近笔者在<strong>outsystems</strong>网站上看了一篇比较好的阐述低代码平台的文章, 这里笔者特意做一个简单的定义:</p>\n<blockquote>\n<p><strong>低代码</strong> 是一系列工具，可帮助我们使用拖放界面直观地创建完整的应用程序。低代码平台无需编写数千行复杂的代码和语法，而是使用户能够快速，直观地构建具有现代用户界面，集成，数据和逻辑的完整应用程序。</p>\n</blockquote>\n<p><strong>低代码</strong> 是一种软件开发方法，可以更快地以最少的手工编码交付应用程序。通过在图形界面中使用可视化建模来组装和配置应用程序，开发人员可以跳过所有基础架构，并重新实现以往很难解决的场景，让开发人员聚焦于自身业务独特性的打造。</p>\n<p>打个比方，想象一下你开的一家口罩制造厂：涉及自动化的机器并不能决定口罩的外观，但它们确实会加快口罩的组装和交付过程。这就是低代码的作用。</p>\n<p>低代码对软件来说就像装配线对口罩制造厂一样：都使困难且耗时的手动任务自动化，从而使人们腾出更多的时间去做更重要的事情。</p>\n<p>我们市面上比较常见的低代码开发平台有:</p>\n<ol>\n<li><strong>可视化IDE</strong>：一种用于可视化定义应用程序的UI，工作流和数据模型，并在必要时添加手写代码的环境。</li>\n<li><strong>与各种后端或服务的连接器</strong>：自动处理数据结构，存储和检索。</li>\n<li><strong>应用程序生命周期管理器</strong>：用于在测试，登台和生产中构建，调试，部署和维护应用程序的自动化工具。</li>\n</ol>\n<p>比较先进的系统（例如<strong>OutSystems</strong>）为我们提供了创建现代，跨平台的企业移动和Web应用程序所需的一切，并具有补充现有团队结构的功能。如下图流程所示:\n<img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9047f80a8c04439aa7814096509d0c11~tplv-k3u1fbpfcp-watermark.image\" alt=\"\"></p>\n<h3 id=\"2-低代码开发流程\">2. 低代码开发流程</h3>\n<p>我们传统的软件开发过程往往都会经过如下所示流程:\n<img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f37cb3f7932f45c7a5f18fe9b12122c9~tplv-k3u1fbpfcp-watermark.image\" alt=\"\">\n也就是从基本的需求设计, 产品规划到前后端应用开发, 最后到测试, 部署上线.</p>\n<p>使用低代码, 他的开发流程看起来像:\n<img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f747ddd55c974eb99d8ca896f4eb8cd7~tplv-k3u1fbpfcp-watermark.image\" alt=\"\">\n每一个步骤都能通过非常简单的拖拽去实现, 大大降低的开发成本, 使得开发人员和产品工作者能更专注的聚焦于核心业务的打磨和快速试错, 更为敏捷开发提供了有力支撑.</p>\n<h3 id=\"3-如何实现低代码体系下的内外部系统交互\">3. 如何实现低代码体系下的内外部系统交互</h3>\n<p>在介绍完低代码平台之后, 我们开始聚焦于实际业务场景, 来实现低代码开发平台中遇到的核心问题以及解决方案. 这里笔者拿<strong>H5-Dooring</strong>来举个例子, 先看看dooring的操作界面:\n<img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/502a219dc84e49ae9fea3fcdd7a5f813~tplv-k3u1fbpfcp-watermark.image\" alt=\"\">\n我们在使用可视化平台时除了需要满足对展示型页面的设计需求外, 我们更多的是要和企业自身业务打通,比如如何实现跨系统间的交互, 如何实现基本元素的交互能力, 如何植入外部API使得数据流向企业内部等. 这些需求对应的实际场景如下:</p>\n<ol>\n<li>网页嵌入App内部需要和app端通信, 而不是单纯的展示</li>\n<li>网页需要对用户的操作实现基本的交互能力, 比如跳转链接, 打开弹窗等</li>\n<li>企业配置好的表单, 对外收集数据时希望流入自己内部系统做数据收集和分析</li>\n</ol>\n<p>笔者将针对以上场景, 在H5-dooring中给出相应的解决方案. </p>\n<h4 id=\"31-网页嵌入app内部和app端通信实现\">3.1 网页嵌入App内部和app端通信实现</h4>\n<p>要实现和外部容器通信,必须具备的就是自定义编码能力, 也就是笔者采用LowCode而不是noCode的原因, 具体实现方式有很多, 比如采用比较流行的代码编辑插件<strong>react-codemirror2</strong>或者 <strong>react-monaco-editor</strong>. 其次要解决的就是哪些组件需要具备这种交互能力, 这里很明显是我们的<strong>Button</strong>组件. 效果如下:\n<img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f95e9e237a2f4a9f9556eead20a824c7~tplv-k3u1fbpfcp-watermark.image\" alt=\"\">\n<img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8aa87d6d17834fc1a4952f7ee43262d4~tplv-k3u1fbpfcp-watermark.image\" alt=\"\">\n这样我们就能实现真正的代码自治和跨容器通信了. 至于<strong>react-codemirror2</strong>的使用方式,笔者简单写个demo供大家参考:</p>\n<pre><code class=\"language-html\">import {Controlled as CodeMirror} from &#39;react-codemirror2&#39;;\nrequire(&#39;codemirror/mode/javascript/javascript&#39;);\n\n&lt;CodeMirror\n  value={this.state.value}\n  options={options}\n  onBeforeChange={(editor, data, value) =&gt; {\n    this.setState({value});\n  }}\n  onChange={(editor, data, value) =&gt; {\n  }}\n/&gt;</code></pre>\n<p>当然其内部支持更多的语言扩展, 感兴趣的可以研究一下, 笔者也基于它实现了一个简单的代码编辑器, 可以研究一下.</p>\n<h4 id=\"32-页面元素对用户的操作实现基本的交互能力-比如跳转链接-打开弹窗等\">3.2 页面元素对用户的操作实现基本的交互能力, 比如跳转链接, 打开弹窗等</h4>\n<p>基本上任何可视化搭建平台都会提供一定程度上的交互能力, 这些交互往往和交互组件所绑定, 比如按钮, 链接, 这里笔者给搭大家展示在Button(按钮)组件中的应用:\n<img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b41e6849990d4fd2897137f04c859d1d~tplv-k3u1fbpfcp-watermark.image\" alt=\"\">\n以上为3中常见的交互模式, 即:</p>\n<ol>\n<li>跳转链接</li>\n<li>打开弹窗, 并自定义弹窗内容</li>\n<li>自定义交互能力</li>\n</ol>\n<p>因为第三种方式笔者已经在上面介绍了, 这里重点介绍弹窗交互. 一般的弹窗交互可能会支持的弹窗内容如下:</p>\n<ol>\n<li>图片</li>\n<li>文字提示</li>\n<li>图文提示</li>\n<li>表格</li>\n</ol>\n<p>还有很多形式, 如果我们的实现中要一次实现这些组件, 那将是非常大的工作量, 所以笔者这里设计了一种一劳永逸的方式——<strong>富文本编辑器</strong>. 笔者提供富文本编辑器来实现用户定义任何内容形态的能力, 如下图所示:\n<img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b10da3eed753419fbc0636f0d3dea076~tplv-k3u1fbpfcp-watermark.image\" alt=\"\">\n在手机端的效果如下:\n<img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/04e90c53906d4c318ab610bd55d0343e~tplv-k3u1fbpfcp-watermark.image\" alt=\"\">\n要实现该交互需要定义交互的json-schema, 这里笔者在之前的文章中也解剖过H5-dooring的具体实现, 这里不一一介绍了, 我们主要来看看富文本编辑器, 这里笔者推荐两款:</p>\n<ul>\n<li><strong>react-quill</strong></li>\n<li><strong>braft-editor</strong></li>\n</ul>\n<h4 id=\"33-企业配置好的表单-对外收集数据时希望流入自己内部系统做数据收集和分析\">3.3 企业配置好的表单, 对外收集数据时希望流入自己内部系统做数据收集和分析</h4>\n<p>对于交互型应用来说, 数据追踪和分析能力是比较重要的一环, 目前也有很多表单问卷工具, 同样H5-Dooring也提供了表单问卷一体化解决方案, 用户可以在平台内搭建自定义的问卷并进行数据收集, 分析. 对于有私域需求的用户来说, 他们希望表单的数据流向自己内部系统, 自己进行分析, 所以我们理论上也应该提供这种开发接口供用户使用, 在表单设计中, 笔者暴露了api接口来实现这一需求:\n<img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ef2cb2bbd68e4adaa2d7e92b3ffe6f96~tplv-k3u1fbpfcp-watermark.image\" alt=\"\">\n如果用户提供了api接口, 页面会自动提交到api指定的地址, 笔者对该接口做了跨域处理, 用户只需要提供对应的跨域接口即可. 代码实现如下:</p>\n<pre><code class=\"language-js\">if (api) {\n    fetch(api, {\n      body: JSON.stringify(formData),\n      cache: &#39;no-cache&#39;,\n      headers: {\n        &#39;content-type&#39;: &#39;application/json&#39;,\n      },\n      method: &#39;POST&#39;,\n      mode: &#39;cors&#39;,\n    });\n  }else {\n    req.post(`xxx/xxx`, formData)\n}</code></pre>\n<p><strong>所以, 今天你又博学了吗?</strong></p>\n<h2 id=\"最后\">最后</h2>\n<p>以上教程笔者已经集成到<a href=\"https://github.com/MrXujiang/h5-Dooring\"><strong>H5-Dooring</strong></a>中，对于一些更复杂的交互功能，通过合理的设计也是可以实现的，大家可以自行探索研究。</p>\n<p>github地址：<a href=\"https://github.com/MrXujiang/h5-Dooring\">H5编辑器H5-Dooring</a></p>\n<p>开源投票入口：<a href=\"https://www.oschina.net/p/h5-dooring\">为H5-Dooring投票</a></p>\n<p>如果想学习更多H5游戏, <strong>webpack</strong>，<strong>node</strong>，<strong>gulp</strong>，<strong>css3</strong>，<strong>javascript</strong>，<strong>nodeJS</strong>，<strong>canvas</strong>数据可视化等前端知识和实战，欢迎在《趣谈前端》一起学习讨论，共同探索前端的边界。</p>\n<h2 id=\"更多推荐\">更多推荐</h2>\n<ul>\n<li><a href=\"https://juejin.im/post/6864410873709592584\">基于React+Koa实现一个h5页面编辑器－Dooring</a></li>\n<li><a href=\"https://juejin.im/post/6876751431374929934\">如何实现H5编辑器的实时预览和真机扫码预览功能</a></li>\n<li><a href=\"https://juejin.im/post/6880802339835133966\">H5编辑器的图片上传和图片库设计方案</a></li>\n<li><a href=\"https://juejin.im/post/6871424158052384782\">在线IDE开发入门之从零实现一个在线代码编辑器</a></li>\n<li><a href=\"https://juejin.im/post/6882391035859697671\">如何设计H5编辑器中的模版库并实现自动生成封面图</a></li>\n<li><a href=\"https://juejin.im/post/6861538848963461133\">深度剖析github star数15.1k的开源项目redux-thunk</a></li>\n</ul>\n"}